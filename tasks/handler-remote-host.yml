---

- name: Замена символов '/' и ':' на '_'
  set_fact:
    current_image_replace_name: "{{ current_image | replace('/', '_') | replace(':', '_') }}"
  run_once: true

- name: Проверка, есть ли docker image '{{ current_image }}' на удалённом хосте
  shell: |
    docker images --format '{{ format_tempate }}' --filter 'reference={{ current_image }}'
  vars:
    format_tempate: !unsafe '{{.Repository}}:{{.Tag}}'
  register: remote_image_exists
  changed_when: remote_image_exists.stdout|length == 0


### Выполняется, если на удалённом хосте нет docker image
- block:

  - name: Удаление ранее созданной директории "{{ image_transfer_remote_path }}" на удалённом хосте.
    file:
      path: "{{ image_transfer_remote_path }}"
      state: absent

  - name: Создание директории "{{ image_transfer_remote_path }}" на удалённом хосте.
    file:
      path: "{{ image_transfer_remote_path }}"
      state: directory
      recurse: yes
    become: no

  ### Загружает, если docker images нет на локальном хосте
  - include_tasks: handler-local-host.yml

  ### Выполняется, если задан кэширующий хост
  - name: Подключение файла 'handler-cache-host.yml', если задан кэширующий хост.
    include_tasks: handler-cache-host.yml
    when: image_transfer_cache_host|length > 0

  ### Выполняется, если не задан кэширующий хост
  - name: Копирование '{{ image_transfer_local_path }}/{{ current_image_replace_name }}.tgz' на удалённый хост.
    copy:
      src: "{{ image_transfer_local_path }}/{{ current_image_replace_name }}.tgz"
      dest: "{{ image_transfer_remote_path }}/{{ current_image_replace_name }}.tgz"
    when: image_transfer_cache_host|length == 0

  - name: Распаковка архива '{{ image_transfer_remote_path }}/{{ current_image_replace_name }}.tgz' на удалённом хосте.
    unarchive:
      src: '{{ image_transfer_remote_path }}/{{ current_image_replace_name }}.tgz'
      dest: '{{ image_transfer_remote_path }}'
      remote_src: yes

  - name: Удаление существующего docker images '{{ current_image }}'
    shell: |
      docker image rm "{{ current_image }}"
    when: image_transfer_force|bool == true

  - name: Загрузка docker image из файлa '{{ image_transfer_remote_path }}/{{ current_image_replace_name }}' на удалённом хосте.
    shell: |
      docker image load --input='{{ image_transfer_remote_path }}/{{ current_image_replace_name }}'

  - name: Удаление директории '{{ image_transfer_remote_path }}' на удалённом хосте.
    file:
      path: '{{ image_transfer_remote_path }}'
      state: absent


  when: remote_image_exists.stdout|length == 0
